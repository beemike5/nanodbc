<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classnanodbc_1_1statement" kind="class" language="C++" prot="public">
    <compoundname>nanodbc::statement</compoundname>
    <includes refid="nanodbc_8h" local="no">nanodbc.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" prot="public" static="no" strong="no">
        <type></type>
        <name>param_direction</name>
        <enumvalue id="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" prot="public">
          <name>PARAM_IN</name>
          <briefdescription>
<para>Binding an input parameter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6a62f755c84582e1dc9e5a8c0ab703e615" prot="public">
          <name>PARAM_OUT</name>
          <briefdescription>
<para>Binding an output parameter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6a75c3aa96cde8c4cbd8c58e3837fbdc5b" prot="public">
          <name>PARAM_INOUT</name>
          <briefdescription>
<para>Binding an input/output parameter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6a2ee8caf768eba50d5b8517ba832b69f4" prot="public">
          <name>PARAM_RETURN</name>
          <briefdescription>
<para>Binding a return parameter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Provides support for retrieving output/return parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__binding" kindref="compound">Binding parameters</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="464" column="1" bodyfile="/mnt/d/nanodbc/nanodbc/nanodbc.h" bodystart="463" bodyend="469"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classnanodbc_1_1statement_1a86934f1dc185694bcc16f90848ad8b32" prot="private" static="no">
        <type>std::function&lt; bool(std::size_t)&gt;</type>
        <definition>typedef std::function&lt;bool(std::size_t)&gt; nanodbc::statement::null_predicate_type</definition>
        <argsstring></argsstring>
        <name>null_predicate_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="1006" column="27" bodyfile="/mnt/d/nanodbc/nanodbc/nanodbc.h" bodystart="1006" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnanodbc_1_1statement_1acd5af29ec5e35cfbeb0751b6d9859b28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class nanodbc::result</definition>
        <argsstring></argsstring>
        <name>nanodbc::result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="1010" column="5" bodyfile="/mnt/d/nanodbc/nanodbc/nanodbc.h" bodystart="1009" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnanodbc_1_1statement_1aaf6c1afa860339d37bde0cbddb1d0cb2" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; statement_impl &gt;</type>
        <definition>std::shared_ptr&lt;statement_impl&gt; nanodbc::statement::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="1013" column="21" bodyfile="/mnt/d/nanodbc/nanodbc/nanodbc.h" bodystart="1013" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnanodbc_1_1statement_1ac9ea91624b4b6136f98b002f75376cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nanodbc::statement::statement</definition>
        <argsstring>()</argsstring>
        <name>statement</name>
        <briefdescription>
<para>Creates a new un-prepared statement. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1aaf1b96ccd2da0f671d9e845d68fcde37" kindref="member">execute()</ref>, <ref refid="classnanodbc_1_1statement_1aef172a65f45487aaeb76c45954b42b75" kindref="member">just_execute()</ref>, <ref refid="classnanodbc_1_1statement_1a8e6a6a9e68aba45704bfdd41fd4e827c" kindref="member">execute_direct()</ref>, <ref refid="classnanodbc_1_1statement_1a1e18b1014feb323c346683a331df7adb" kindref="member">just_execute_direct()</ref>, <ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref>, <ref refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" kindref="member">prepare()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="474" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1aaa2dbe21f428c67d7dd32b9d8eeb8877" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>nanodbc::statement::statement</definition>
        <argsstring>(class connection &amp;conn)</argsstring>
        <name>statement</name>
        <param>
          <type>class <ref refid="classnanodbc_1_1connection" kindref="compound">connection</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Constructs a statement object and associates it to the given connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref>, <ref refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" kindref="member">prepare()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="479" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a81bee831e734bedb4fbedd4cbf1a238f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nanodbc::statement::statement</definition>
        <argsstring>(class connection &amp;conn, const string &amp;query, long timeout=0)</argsstring>
        <name>statement</name>
        <param>
          <type>class <ref refid="classnanodbc_1_1connection" kindref="compound">connection</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructs and prepares a statement using the given connection and query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The SQL query statement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in seconds before query timeout. Default: 0 meaning no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1aaf1b96ccd2da0f671d9e845d68fcde37" kindref="member">execute()</ref>, <ref refid="classnanodbc_1_1statement_1aef172a65f45487aaeb76c45954b42b75" kindref="member">just_execute()</ref>, <ref refid="classnanodbc_1_1statement_1a8e6a6a9e68aba45704bfdd41fd4e827c" kindref="member">execute_direct()</ref>, <ref refid="classnanodbc_1_1statement_1a1e18b1014feb323c346683a331df7adb" kindref="member">just_execute_direct()</ref>, <ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref>, <ref refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" kindref="member">prepare()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="486" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a78cdb0dbf1437cd98eff448e8c6a8757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nanodbc::statement::statement</definition>
        <argsstring>(const statement &amp;rhs)</argsstring>
        <name>statement</name>
        <param>
          <type>const <ref refid="classnanodbc_1_1statement" kindref="compound">statement</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="489" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a99b7708d308ee9313f5879ed09750fdf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>nanodbc::statement::statement</definition>
        <argsstring>(statement &amp;&amp;rhs) noexcept</argsstring>
        <name>statement</name>
        <param>
          <type><ref refid="classnanodbc_1_1statement" kindref="compound">statement</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="492" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a84b754fdb748dbd60449b33a1e032a56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classnanodbc_1_1statement" kindref="compound">statement</ref> &amp;</type>
        <definition>statement&amp; nanodbc::statement::operator=</definition>
        <argsstring>(statement rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classnanodbc_1_1statement" kindref="compound">statement</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="495" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1aaeb282293b92d0c9c0dc9e6452c91695" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::swap</definition>
        <argsstring>(statement &amp;rhs) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classnanodbc_1_1statement" kindref="compound">statement</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Member swap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="498" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1aa30610291426567164aab50aeacaa537" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>nanodbc::statement::~statement</definition>
        <argsstring>() noexcept</argsstring>
        <name>~statement</name>
        <briefdescription>
<para>Closes the statement. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1abcf1dda8ab40a3b8ebd33c69afa4a399" kindref="member">close()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="502" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::open</definition>
        <argsstring>(class connection &amp;conn)</argsstring>
        <name>open</name>
        <param>
          <type>class <ref refid="classnanodbc_1_1connection" kindref="compound">connection</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Creates a statement for the given connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection where the statement will be executed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="507" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a7e34012ad0120d8c3780bea1d29c3903" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nanodbc::statement::open</definition>
        <argsstring>() const</argsstring>
        <name>open</name>
        <briefdescription>
<para>Returns true if connection is open. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="510" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1aa3e77eb9771cf5d8478208b0a9e2c59a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nanodbc::statement::connected</definition>
        <argsstring>() const</argsstring>
        <name>connected</name>
        <briefdescription>
<para>Returns true if connected to the database. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="513" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1af2fcfa69cc51730d7fecb7e8153b0f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classnanodbc_1_1connection" kindref="compound">connection</ref> &amp;</type>
        <definition>class connection&amp; nanodbc::statement::connection</definition>
        <argsstring>()</argsstring>
        <name>connection</name>
        <briefdescription>
<para>Returns the associated connection object if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="516" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1aa4dbb0d57a5b055265fdfab81b257038" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const class <ref refid="classnanodbc_1_1connection" kindref="compound">connection</ref> &amp;</type>
        <definition>const class connection&amp; nanodbc::statement::connection</definition>
        <argsstring>() const</argsstring>
        <name>connection</name>
        <briefdescription>
<para>Returns the associated connection object if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="519" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1ad4c6a652991d8b2d1fd36de8a91858ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* nanodbc::statement::native_statement_handle</definition>
        <argsstring>() const</argsstring>
        <name>native_statement_handle</name>
        <briefdescription>
<para>Returns the native ODBC statement handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="522" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1abcf1dda8ab40a3b8ebd33c69afa4a399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Closes the statement and frees all associated resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="525" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a81f6e6e0b547a900d20652fe5abe7b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::cancel</definition>
        <argsstring>()</argsstring>
        <name>cancel</name>
        <briefdescription>
<para>Cancels execution of the statement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="529" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::prepare</definition>
        <argsstring>(class connection &amp;conn, const string &amp;query, long timeout=0)</argsstring>
        <name>prepare</name>
        <param>
          <type>class <ref refid="classnanodbc_1_1connection" kindref="compound">connection</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Opens and prepares the given statement to execute on the given connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection where the statement will be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The SQL query that will be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in seconds before query timeout. Default 0 meaning no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="537" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a811a7bdbdea77b59af4aed8eddbc6840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::prepare</definition>
        <argsstring>(const string &amp;query, long timeout=0)</argsstring>
        <name>prepare</name>
        <param>
          <type>const string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Prepares the given statement to execute its associated connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the statement is not open throws <ref refid="classnanodbc_1_1programming__error" kindref="compound">programming_error</ref>. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The SQL query that will be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in seconds before query timeout. Default 0 meaning no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
<parametername><ref refid="classnanodbc_1_1programming__error" kindref="compound">programming_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="545" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1adbd1acbbdcc529dc668bfef341593573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::timeout</definition>
        <argsstring>(long timeout=0)</argsstring>
        <name>timeout</name>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the number in seconds before query timeout. Default is 0 indicating no timeout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="549" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a8e6a6a9e68aba45704bfdd41fd4e827c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classnanodbc_1_1result" kindref="compound">result</ref></type>
        <definition>class result nanodbc::statement::execute_direct</definition>
        <argsstring>(class connection &amp;conn, const string &amp;query, long batch_operations=1, long timeout=0)</argsstring>
        <name>execute_direct</name>
        <param>
          <type>class <ref refid="classnanodbc_1_1connection" kindref="compound">connection</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>long</type>
          <declname>batch_operations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Opens, prepares, and executes the given query directly on the given connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection where the statement will be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The SQL query that will be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batch_operations</parametername>
</parameternamelist>
<parameterdescription>
<para>Numbers of rows to fetch per rowset, or the number of batch parameters to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in seconds before query timeout. Default 0 meaning no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A result set object. </para>
</simplesect>
<simplesect kind="attention"><para>You will want to use transactions if you are doing batch operations because it will prevent auto commits occurring after each individual operation is executed. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref>, <ref refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" kindref="member">prepare()</ref>, <ref refid="classnanodbc_1_1statement_1aaf1b96ccd2da0f671d9e845d68fcde37" kindref="member">execute()</ref>, <ref refid="classnanodbc_1_1result" kindref="compound">result</ref>, <ref refid="classnanodbc_1_1transaction" kindref="compound">transaction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="549" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1ab676933b9578da7d773f97269d270eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nanodbc::statement::async_prepare</definition>
        <argsstring>(const string &amp;query, void *event_handle, long timeout=0)</argsstring>
        <name>async_prepare</name>
        <param>
          <type>const string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>event_handle</declname>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Prepare the given statement, in asynchronous mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the statement is not open throws <ref refid="classnanodbc_1_1programming__error" kindref="compound">programming_error</ref>.</para>
</simplesect>
This method will only be available if nanodbc is built against ODBC headers and library that supports asynchronous mode. Such that the identifiers <computeroutput>SQL_ATTR_ASYNC_STMT_EVENT</computeroutput> and <computeroutput>SQLCompleteAsync</computeroutput> are extant. Otherwise this method will be defined, but not implemented.</para>
<para>Asynchronous features can be disabled entirely by defining <computeroutput>NANODBC_DISABLE_ASYNC</computeroutput> when building nanodbc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The event handle the caller will wait before calling complete_prepare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The SQL query that will be prepared. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in seconds before query timeout. Default 0 meaning no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean: true if the event handle needs to be awaited, false is result is ready now. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1a416c39007e292cf9b95f368d829ad5cb" kindref="member">complete_prepare()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="584" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a416c39007e292cf9b95f368d829ad5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::complete_prepare</definition>
        <argsstring>()</argsstring>
        <name>complete_prepare</name>
        <briefdescription>
<para>Completes a previously initiated asynchronous query preparation. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will only be available if nanodbc is built against ODBC headers and library that supports asynchronous mode. Such that the identifiers <computeroutput>SQL_ATTR_ASYNC_STMT_EVENT</computeroutput> and <computeroutput>SQLCompleteAsync</computeroutput> are extant. Otherwise this method will be defined, but not implemented.</para>
<para>Asynchronous features can be disabled entirely by defining <computeroutput>NANODBC_DISABLE_ASYNC</computeroutput> when building nanodbc.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1ab676933b9578da7d773f97269d270eee" kindref="member">async_prepare()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="597" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a34184874a281b654f685b2f351956302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nanodbc::statement::async_execute_direct</definition>
        <argsstring>(class connection &amp;conn, void *event_handle, const string &amp;query, long batch_operations=1, long timeout=0)</argsstring>
        <name>async_execute_direct</name>
        <param>
          <type>class <ref refid="classnanodbc_1_1connection" kindref="compound">connection</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>event_handle</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>long</type>
          <declname>batch_operations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Opens, prepares, and executes query directly on the given connection, in async mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will only be available if nanodbc is built against ODBC headers and library that supports asynchronous mode. Such that the identifiers <computeroutput>SQL_ATTR_ASYNC_STMT_EVENT</computeroutput> and <computeroutput>SQLCompleteAsync</computeroutput> are extant. Otherwise this method will be defined, but not implemented.</para>
<para>Asynchronous features can be disabled entirely by defining <computeroutput>NANODBC_DISABLE_ASYNC</computeroutput> when building nanodbc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection where the statement will be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The event handle the caller will wait before calling complete_execute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The SQL query that will be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batch_operations</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows to fetch per rowset or number of batch parameters to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in seconds before query timeout. Default 0 meaning no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean: true if event handle needs to be awaited, false if result ready now. </para>
</simplesect>
<simplesect kind="attention"><para>You will want to use transactions if you are doing batch operations because it will prevent auto commits after each individual operation is executed. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1aa4a0bb3fc0112469e837e1acd5ef3f6a" kindref="member">complete_execute()</ref>, <ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref>, <ref refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" kindref="member">prepare()</ref>, <ref refid="classnanodbc_1_1statement_1aaf1b96ccd2da0f671d9e845d68fcde37" kindref="member">execute()</ref>, <ref refid="classnanodbc_1_1result" kindref="compound">result</ref>, <ref refid="classnanodbc_1_1transaction" kindref="compound">transaction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="618" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1ac7086dafc8c0f014c629d15f97cc9505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nanodbc::statement::async_execute</definition>
        <argsstring>(void *event_handle, long batch_operations=1, long timeout=0)</argsstring>
        <name>async_execute</name>
        <param>
          <type>void *</type>
          <declname>event_handle</declname>
        </param>
        <param>
          <type>long</type>
          <declname>batch_operations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Execute the previously prepared query now, in asynchronous mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will only be available if nanodbc is built against ODBC headers and library that supports asynchronous mode. Such that the identifiers <computeroutput>SQL_ATTR_ASYNC_STMT_EVENT</computeroutput> and <computeroutput>SQLCompleteAsync</computeroutput> are extant. Otherwise this method will be defined, but not implemented.</para>
<para>Asynchronous features can be disabled entirely by defining <computeroutput>NANODBC_DISABLE_ASYNC</computeroutput> when building nanodbc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The event handle the caller will wait before calling complete_execute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batch_operations</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows to fetch per rowset or number of batch parameters to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in seconds before query timeout. Default 0 meaning no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean: true if event handle needs to be awaited, false if result is ready now. </para>
</simplesect>
<simplesect kind="attention"><para>You will want to use transactions if you are doing batch operations because it will prevent auto commits after each individual operation is executed. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1aa4a0bb3fc0112469e837e1acd5ef3f6a" kindref="member">complete_execute()</ref>, <ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref>, <ref refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" kindref="member">prepare()</ref>, <ref refid="classnanodbc_1_1result" kindref="compound">result</ref>, <ref refid="classnanodbc_1_1transaction" kindref="compound">transaction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="642" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1aa4a0bb3fc0112469e837e1acd5ef3f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classnanodbc_1_1result" kindref="compound">result</ref></type>
        <definition>class result nanodbc::statement::complete_execute</definition>
        <argsstring>(long batch_operations=1)</argsstring>
        <name>complete_execute</name>
        <param>
          <type>long</type>
          <declname>batch_operations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Completes a previously initiated asynchronous query execution, returning the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will only be available if nanodbc is built against ODBC headers and library that supports asynchronous mode. Such that the identifiers <computeroutput>SQL_ATTR_ASYNC_STMT_EVENT</computeroutput> and <computeroutput>SQLCompleteAsync</computeroutput> are extant. Otherwise this method will be defined, but not implemented.</para>
<para>Asynchronous features can be disabled entirely by defining <computeroutput>NANODBC_DISABLE_ASYNC</computeroutput> when building nanodbc.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A result set object. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>batch_operations</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows to fetch per rowset or number of batch parameters to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1ac7086dafc8c0f014c629d15f97cc9505" kindref="member">async_execute()</ref>, <ref refid="classnanodbc_1_1statement_1a34184874a281b654f685b2f351956302" kindref="member">async_execute_direct()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="642" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1ab5498ba941c04dfe1e7e47928161b0e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NANODBC_DEPRECATED class <ref refid="classnanodbc_1_1result" kindref="compound">result</ref></type>
        <definition>NANODBC_DEPRECATED class result nanodbc::statement::async_complete</definition>
        <argsstring>(long batch_operations=1)</argsstring>
        <name>async_complete</name>
        <param>
          <type>long</type>
          <declname>batch_operations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Completes a previously initiated asynchronous query execution, returning the result. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use complete_execute instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="662" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1ada8ceb1d90ebe7c0a876a185fa89f009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::enable_async</definition>
        <argsstring>(void *event_handle)</argsstring>
        <name>enable_async</name>
        <param>
          <type>void *</type>
          <declname>event_handle</declname>
        </param>
        <briefdescription>
<para>undocumented - for internal use only (used from result_impl) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="665" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a7b96b992fb9891b46411c300b017fe74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::disable_async</definition>
        <argsstring>() const</argsstring>
        <name>disable_async</name>
        <briefdescription>
<para>undocumented - for internal use only (used from result_impl) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="668" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a1e18b1014feb323c346683a331df7adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::just_execute_direct</definition>
        <argsstring>(class connection &amp;conn, const string &amp;query, long batch_operations=1, long timeout=0)</argsstring>
        <name>just_execute_direct</name>
        <param>
          <type>class <ref refid="classnanodbc_1_1connection" kindref="compound">connection</ref> &amp;</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>long</type>
          <declname>batch_operations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Execute the previously prepared query now without constructing result object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>The connection where the statement will be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The SQL query that will be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batch_operations</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows to fetch per rowset, or number of batch parameters to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds before query timeout. Default is 0 indicating no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A result set object. </para>
</simplesect>
<simplesect kind="attention"><para>You will want to use transactions if you are doing batch operations because it will prevent auto commits after each individual operation is executed. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref>, <ref refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" kindref="member">prepare()</ref>, <ref refid="classnanodbc_1_1statement_1aaf1b96ccd2da0f671d9e845d68fcde37" kindref="member">execute()</ref>, <ref refid="classnanodbc_1_1statement_1a8e6a6a9e68aba45704bfdd41fd4e827c" kindref="member">execute_direct()</ref>, <ref refid="classnanodbc_1_1result" kindref="compound">result</ref>, <ref refid="classnanodbc_1_1transaction" kindref="compound">transaction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="681" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1aaf1b96ccd2da0f671d9e845d68fcde37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classnanodbc_1_1result" kindref="compound">result</ref></type>
        <definition>class result nanodbc::statement::execute</definition>
        <argsstring>(long batch_operations=1, long timeout=0)</argsstring>
        <name>execute</name>
        <param>
          <type>long</type>
          <declname>batch_operations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Execute the previously prepared query now. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>batch_operations</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows to fetch per rowset, or number of batch parameters to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in seconds before query timeout. Default 0 meaning no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A result set object. </para>
</simplesect>
<simplesect kind="attention"><para>You will want to use transactions if you are doing batch operations because it will prevent auto commits after each individual operation is executed. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref>, <ref refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" kindref="member">prepare()</ref>, <ref refid="classnanodbc_1_1result" kindref="compound">result</ref>, <ref refid="classnanodbc_1_1transaction" kindref="compound">transaction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="681" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1aef172a65f45487aaeb76c45954b42b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::just_execute</definition>
        <argsstring>(long batch_operations=1, long timeout=0)</argsstring>
        <name>just_execute</name>
        <param>
          <type>long</type>
          <declname>batch_operations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>long</type>
          <declname>timeout</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Execute the previously prepared query now without constructing result object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>batch_operations</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows to fetch per rowset, or number of batch parameters to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The number in seconds before query timeout. Default 0 meaning no timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A result set object. </para>
</simplesect>
<simplesect kind="attention"><para>You will want to use transactions if you are doing batch operations because it will prevent auto commits after each individual operation is executed. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" kindref="member">open()</ref>, <ref refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" kindref="member">prepare()</ref>, <ref refid="classnanodbc_1_1statement_1aaf1b96ccd2da0f671d9e845d68fcde37" kindref="member">execute()</ref>, <ref refid="classnanodbc_1_1result" kindref="compound">result</ref>, <ref refid="classnanodbc_1_1transaction" kindref="compound">transaction</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="705" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1ad74b96c6f7f52bd3aef019948b94c805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class <ref refid="classnanodbc_1_1result" kindref="compound">result</ref></type>
        <definition>class result nanodbc::statement::procedure_columns</definition>
        <argsstring>(const string &amp;catalog, const string &amp;schema, const string &amp;procedure, const string &amp;column)</argsstring>
        <name>procedure_columns</name>
        <param>
          <type>const string &amp;</type>
          <declname>catalog</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>procedure</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Returns the input and output paramters of the specified stored procedure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>catalog</parametername>
</parameternamelist>
<parameterdescription>
<para>The catalog name of the procedure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern to use for schema names. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>procedure</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the procedure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern to use for column names. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A result set object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="705" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1af904239b45c5a45af262d41cc6441398" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long nanodbc::statement::affected_rows</definition>
        <argsstring>() const</argsstring>
        <name>affected_rows</name>
        <briefdescription>
<para>Returns rows affected by the request or -1 if affected rows is not available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="722" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a750301a6d2cfa67bc32c766edfc7825c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>short</type>
        <definition>short nanodbc::statement::columns</definition>
        <argsstring>() const</argsstring>
        <name>columns</name>
        <briefdescription>
<para>Returns the number of columns in a result set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="726" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1ae225c1ec30fb1095f96f207fab2a8793" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::reset_parameters</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset_parameters</name>
        <briefdescription>
<para>Resets all currently bound parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="729" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a7af565aeec0737be62c1a458deddd606" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>short</type>
        <definition>short nanodbc::statement::parameters</definition>
        <argsstring>() const</argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Returns the number of parameters in the statement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="733" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1aef87fd2e1a1b307f212755fdab1dad07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long nanodbc::statement::parameter_size</definition>
        <argsstring>(short param_index) const</argsstring>
        <name>parameter_size</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <briefdescription>
<para>Returns parameter size for indicated parameter placeholder in a prepared statement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="736" column="19"/>
      </memberdef>
      <memberdef kind="function" id="group__binding_1gabe1b3e2f93e5b854f6f6a3dfa3250f5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind</definition>
        <argsstring>(short param_index, T const *value, param_direction direction=PARAM_IN)</argsstring>
        <name>bind</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds given value to given parameter placeholder number in the prepared statement. </para>
        </briefdescription>
        <detaileddescription>
<para>If your prepared SQL query has any ? placeholders, this is how you bind values to them. Placeholder numbers count from left to right and are 0-indexed.</para>
<para>It is NOT possible to use these functions for batch operations as number of elements is not specified here.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of parameter marker (placeholder position). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to substitute into placeholder. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>ODBC parameter direction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="756" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__multi_1ga21de5d66a3e381040ca03a4f0fdcc5db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind</definition>
        <argsstring>(short param_index, T const *values, std::size_t batch_size, param_direction direction=PARAM_IN)</argsstring>
        <name>bind</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__multi" kindref="compound">Binding multiple non-string values</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="780" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__multi_1gadc594c1e061661b7f95639fcf25ec2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind</definition>
        <argsstring>(short param_index, T const *values, std::size_t batch_size, T const *null_sentry, param_direction direction=PARAM_IN)</argsstring>
        <name>bind</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>null_sentry</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__multi" kindref="compound">Binding multiple non-string values</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="789" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__multi_1gab7047fdb7cfec9bed6861b9a9c9b98cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind</definition>
        <argsstring>(short param_index, T const *values, std::size_t batch_size, bool const *nulls, param_direction direction=PARAM_IN)</argsstring>
        <name>bind</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>bool const *</type>
          <declname>nulls</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__multi" kindref="compound">Binding multiple non-string values</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="799" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__multi_1gac04830aadf2e00d3a3d05af8690eb241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::bind</definition>
        <argsstring>(short param_index, std::vector&lt; std::vector&lt; uint8_t &gt;&gt; const &amp;values, param_direction direction=PARAM_IN)</argsstring>
        <name>bind</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; uint8_t &gt;&gt; const &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__multi" kindref="compound">Binding multiple non-string values</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="808" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__multi_1ga5242c1154450bfe699b73a2f26294560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::bind</definition>
        <argsstring>(short param_index, std::vector&lt; std::vector&lt; uint8_t &gt;&gt; const &amp;values, bool const *nulls, param_direction direction=PARAM_IN)</argsstring>
        <name>bind</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; uint8_t &gt;&gt; const &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>bool const *</type>
          <declname>nulls</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__multi" kindref="compound">Binding multiple non-string values</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="815" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__multi_1ga72e3b3fea37e2e8456f4cf2b66aa21f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::bind</definition>
        <argsstring>(short param_index, std::vector&lt; std::vector&lt; uint8_t &gt;&gt; const &amp;values, uint8_t const *null_sentry, param_direction direction=PARAM_IN)</argsstring>
        <name>bind</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; uint8_t &gt;&gt; const &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>null_sentry</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__multi" kindref="compound">Binding multiple non-string values</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="823" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_character&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind_strings</definition>
        <argsstring>(short param_index, T const *values, std::size_t value_size, std::size_t batch_size, param_direction direction=PARAM_IN)</argsstring>
        <name>bind_strings</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>value_size</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple string values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" kindref="member">bind_strings</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="855" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__strings_1gaecd4578e6c204ffb15203e743a4ffdba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_string&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind_strings</definition>
        <argsstring>(short param_index, std::vector&lt; T &gt; const &amp;values, param_direction direction=PARAM_IN)</argsstring>
        <name>bind_strings</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple string values. </para>
        </briefdescription>
        <detaileddescription>
<para>Size of the values vector indicates number of values to bind. Longest string in the array determines maximum length of individual value.</para>
<para><simplesect kind="see"><para><ref refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" kindref="member">bind_strings</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="869" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__strings_1ga979e2bdbe4d7b3a6845112a306735a3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>BatchSize</declname>
            <defname>BatchSize</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>ValueSize</declname>
            <defname>ValueSize</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_character&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind_strings</definition>
        <argsstring>(short param_index, T const (&amp;values)[BatchSize][ValueSize], param_direction direction=PARAM_IN)</argsstring>
        <name>bind_strings</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const (&amp;)</type>
          <declname>values</declname>
          <array>[BatchSize][ValueSize]</array>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple string values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" kindref="member">bind_strings</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="881" column="10" bodyfile="/mnt/d/nanodbc/nanodbc/nanodbc.h" bodystart="881" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__strings_1gaab3ea540d9998532141d11970107767d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_character&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind_strings</definition>
        <argsstring>(short param_index, T const *values, std::size_t value_size, std::size_t batch_size, T const *null_sentry, param_direction direction=PARAM_IN)</argsstring>
        <name>bind_strings</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>value_size</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>null_sentry</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple string values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" kindref="member">bind_strings</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="893" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__strings_1gab3fcf94cac28bc25a794c3cd9b9cf47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_string&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind_strings</definition>
        <argsstring>(short param_index, std::vector&lt; T &gt; const &amp;values, typename T::value_type const *null_sentry, param_direction direction=PARAM_IN)</argsstring>
        <name>bind_strings</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>typename T::value_type const *</type>
          <declname>null_sentry</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple string values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" kindref="member">bind_strings</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="904" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__strings_1gaeb56183ce0f1c8a213b3088b8b03b6ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>BatchSize</declname>
            <defname>BatchSize</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>ValueSize</declname>
            <defname>ValueSize</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_character&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind_strings</definition>
        <argsstring>(short param_index, T const (&amp;values)[BatchSize][ValueSize], T const *null_sentry, param_direction direction=PARAM_IN)</argsstring>
        <name>bind_strings</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const (&amp;)</type>
          <declname>values</declname>
          <array>[BatchSize][ValueSize]</array>
        </param>
        <param>
          <type>T const *</type>
          <declname>null_sentry</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple string values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" kindref="member">bind_strings</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="917" column="10" bodyfile="/mnt/d/nanodbc/nanodbc/nanodbc.h" bodystart="917" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__strings_1gadfdbae0cd7e7bf3737715bd32904438c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_character&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind_strings</definition>
        <argsstring>(short param_index, T const *values, std::size_t value_size, std::size_t batch_size, bool const *nulls, param_direction direction=PARAM_IN)</argsstring>
        <name>bind_strings</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>value_size</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>bool const *</type>
          <declname>nulls</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple string values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" kindref="member">bind_strings</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="930" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__strings_1ga7cc7255e38df32cedd8e50f86512a9a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_string&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind_strings</definition>
        <argsstring>(short param_index, std::vector&lt; T &gt; const &amp;values, bool const *nulls, param_direction direction=PARAM_IN)</argsstring>
        <name>bind_strings</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; const &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>bool const *</type>
          <declname>nulls</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple string values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" kindref="member">bind_strings</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="941" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__bind__strings_1ga15d74df8689ffbc2543cd7453d32097b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>BatchSize</declname>
            <defname>BatchSize</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>ValueSize</declname>
            <defname>ValueSize</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_character&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nanodbc::statement::bind_strings</definition>
        <argsstring>(short param_index, T const (&amp;values)[BatchSize][ValueSize], bool const *nulls, param_direction direction=PARAM_IN)</argsstring>
        <name>bind_strings</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>T const (&amp;)</type>
          <declname>values</declname>
          <array>[BatchSize][ValueSize]</array>
        </param>
        <param>
          <type>bool const *</type>
          <declname>nulls</declname>
        </param>
        <param>
          <type><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" kindref="member">param_direction</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" kindref="member">PARAM_IN</ref></defval>
        </param>
        <briefdescription>
<para>Binds multiple string values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" kindref="member">bind_strings</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="954" column="10" bodyfile="/mnt/d/nanodbc/nanodbc/nanodbc.h" bodystart="954" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="group__binding_1ga1c92f0059d16d859355f61a020e78d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::bind_null</definition>
        <argsstring>(short param_index, std::size_t batch_size=1)</argsstring>
        <name>bind_null</name>
        <param>
          <type>short</type>
          <declname>param_index</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>batch_size</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Binds null values to the parameter placeholder number in the prepared statement. </para>
        </briefdescription>
        <detaileddescription>
<para>If your prepared SQL query has any parameter markers, ? (question mark) placeholders, this is how you bind values to them. Parameter markers are numbered using Zero-based index from left to right.</para>
<para>It is possible to use this function for batch operations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of parameter marker (placeholder position). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batch_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements being bound. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1database__error" kindref="compound">database_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="977" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classnanodbc_1_1statement_1a8aa87b3c1660353541c5b0b5b2f295fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nanodbc::statement::describe_parameters</definition>
        <argsstring>(const std::vector&lt; short &gt; &amp;idx, const std::vector&lt; short &gt; &amp;type, const std::vector&lt; unsigned long &gt; &amp;size, const std::vector&lt; short &gt; &amp;scale)</argsstring>
        <name>describe_parameters</name>
        <param>
          <type>const std::vector&lt; short &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const std::vector&lt; short &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned long &gt; &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const std::vector&lt; short &gt; &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Sets descriptions for parameters in the prepared statement. </para>
        </briefdescription>
        <detaileddescription>
<para>If your prepared SQL query has any parameter markers, ? (question mark) placeholders this is how you can describe the SQL type, size and scale for some or all of the parameters, prior to binding any data to the parameters. Calling this method is optional: if a parameter is not described using a call to this method, then during a bind an attempt is made to identify it using a call to the ODBC SQLDescribeParam API handle. Once set, description is re-used for possibly repeated binds execution and only cleared when the statement is cleared / destroyed. Parameter markers are numbered using Zero-based index from left to right.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of zero-based indices of parameters we are describing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of (short integer) types. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of (unsigned long) sizes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of (short integer) decimal precision / scale. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classnanodbc_1_1programming__error" kindref="compound">programming_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="998" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a statement on the database. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/mnt/d/nanodbc/nanodbc/nanodbc.h" line="459" column="1" bodyfile="/mnt/d/nanodbc/nanodbc/nanodbc.h" bodystart="458" bodyend="1014"/>
    <listofallmembers>
      <member refid="classnanodbc_1_1statement_1af904239b45c5a45af262d41cc6441398" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>affected_rows</name></member>
      <member refid="classnanodbc_1_1statement_1ab5498ba941c04dfe1e7e47928161b0e5" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>async_complete</name></member>
      <member refid="classnanodbc_1_1statement_1ac7086dafc8c0f014c629d15f97cc9505" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>async_execute</name></member>
      <member refid="classnanodbc_1_1statement_1a34184874a281b654f685b2f351956302" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>async_execute_direct</name></member>
      <member refid="classnanodbc_1_1statement_1ab676933b9578da7d773f97269d270eee" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>async_prepare</name></member>
      <member refid="group__binding_1gabe1b3e2f93e5b854f6f6a3dfa3250f5c" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind</name></member>
      <member refid="group__bind__multi_1ga21de5d66a3e381040ca03a4f0fdcc5db" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind</name></member>
      <member refid="group__bind__multi_1gadc594c1e061661b7f95639fcf25ec2cb" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind</name></member>
      <member refid="group__bind__multi_1gab7047fdb7cfec9bed6861b9a9c9b98cb" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind</name></member>
      <member refid="group__bind__multi_1gac04830aadf2e00d3a3d05af8690eb241" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind</name></member>
      <member refid="group__bind__multi_1ga5242c1154450bfe699b73a2f26294560" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind</name></member>
      <member refid="group__bind__multi_1ga72e3b3fea37e2e8456f4cf2b66aa21f2" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind</name></member>
      <member refid="group__binding_1ga1c92f0059d16d859355f61a020e78d13" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_null</name></member>
      <member refid="group__bind__strings_1ga8914c229f28ee7b02cf1b85684741326" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_strings</name></member>
      <member refid="group__bind__strings_1gaecd4578e6c204ffb15203e743a4ffdba" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_strings</name></member>
      <member refid="group__bind__strings_1ga979e2bdbe4d7b3a6845112a306735a3e" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_strings</name></member>
      <member refid="group__bind__strings_1gaab3ea540d9998532141d11970107767d" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_strings</name></member>
      <member refid="group__bind__strings_1gab3fcf94cac28bc25a794c3cd9b9cf47c" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_strings</name></member>
      <member refid="group__bind__strings_1gaeb56183ce0f1c8a213b3088b8b03b6ff" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_strings</name></member>
      <member refid="group__bind__strings_1gadfdbae0cd7e7bf3737715bd32904438c" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_strings</name></member>
      <member refid="group__bind__strings_1ga7cc7255e38df32cedd8e50f86512a9a8" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_strings</name></member>
      <member refid="group__bind__strings_1ga15d74df8689ffbc2543cd7453d32097b" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>bind_strings</name></member>
      <member refid="classnanodbc_1_1statement_1a81f6e6e0b547a900d20652fe5abe7b75" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>cancel</name></member>
      <member refid="classnanodbc_1_1statement_1abcf1dda8ab40a3b8ebd33c69afa4a399" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>close</name></member>
      <member refid="classnanodbc_1_1statement_1a750301a6d2cfa67bc32c766edfc7825c" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>columns</name></member>
      <member refid="classnanodbc_1_1statement_1aa4a0bb3fc0112469e837e1acd5ef3f6a" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>complete_execute</name></member>
      <member refid="classnanodbc_1_1statement_1a416c39007e292cf9b95f368d829ad5cb" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>complete_prepare</name></member>
      <member refid="classnanodbc_1_1statement_1aa3e77eb9771cf5d8478208b0a9e2c59a" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>connected</name></member>
      <member refid="classnanodbc_1_1statement_1af2fcfa69cc51730d7fecb7e8153b0f7a" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>connection</name></member>
      <member refid="classnanodbc_1_1statement_1aa4dbb0d57a5b055265fdfab81b257038" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>connection</name></member>
      <member refid="classnanodbc_1_1statement_1a8aa87b3c1660353541c5b0b5b2f295fc" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>describe_parameters</name></member>
      <member refid="classnanodbc_1_1statement_1a7b96b992fb9891b46411c300b017fe74" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>disable_async</name></member>
      <member refid="classnanodbc_1_1statement_1ada8ceb1d90ebe7c0a876a185fa89f009" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>enable_async</name></member>
      <member refid="classnanodbc_1_1statement_1aaf1b96ccd2da0f671d9e845d68fcde37" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>execute</name></member>
      <member refid="classnanodbc_1_1statement_1a8e6a6a9e68aba45704bfdd41fd4e827c" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>execute_direct</name></member>
      <member refid="classnanodbc_1_1statement_1aaf6c1afa860339d37bde0cbddb1d0cb2" prot="private" virt="non-virtual"><scope>nanodbc::statement</scope><name>impl_</name></member>
      <member refid="classnanodbc_1_1statement_1aef172a65f45487aaeb76c45954b42b75" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>just_execute</name></member>
      <member refid="classnanodbc_1_1statement_1a1e18b1014feb323c346683a331df7adb" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>just_execute_direct</name></member>
      <member refid="classnanodbc_1_1statement_1acd5af29ec5e35cfbeb0751b6d9859b28" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>nanodbc::result</name></member>
      <member refid="classnanodbc_1_1statement_1ad4c6a652991d8b2d1fd36de8a91858ea" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>native_statement_handle</name></member>
      <member refid="classnanodbc_1_1statement_1a86934f1dc185694bcc16f90848ad8b32" prot="private" virt="non-virtual"><scope>nanodbc::statement</scope><name>null_predicate_type</name></member>
      <member refid="classnanodbc_1_1statement_1a473ec2d726f6d8acc42ce0f5f6d1b967" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>open</name></member>
      <member refid="classnanodbc_1_1statement_1a7e34012ad0120d8c3780bea1d29c3903" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>open</name></member>
      <member refid="classnanodbc_1_1statement_1a84b754fdb748dbd60449b33a1e032a56" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>operator=</name></member>
      <member refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>param_direction</name></member>
      <member refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6ae33f42ce0677d00c291ff4d8e39f99de" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>PARAM_IN</name></member>
      <member refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6a75c3aa96cde8c4cbd8c58e3837fbdc5b" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>PARAM_INOUT</name></member>
      <member refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6a62f755c84582e1dc9e5a8c0ab703e615" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>PARAM_OUT</name></member>
      <member refid="classnanodbc_1_1statement_1a523142f53cbbee8d68a074da993e7fa6a2ee8caf768eba50d5b8517ba832b69f4" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>PARAM_RETURN</name></member>
      <member refid="classnanodbc_1_1statement_1aef87fd2e1a1b307f212755fdab1dad07" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>parameter_size</name></member>
      <member refid="classnanodbc_1_1statement_1a7af565aeec0737be62c1a458deddd606" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>parameters</name></member>
      <member refid="classnanodbc_1_1statement_1a63b56d30a303014ce8f80df5e5b67dca" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>prepare</name></member>
      <member refid="classnanodbc_1_1statement_1a811a7bdbdea77b59af4aed8eddbc6840" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>prepare</name></member>
      <member refid="classnanodbc_1_1statement_1ad74b96c6f7f52bd3aef019948b94c805" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>procedure_columns</name></member>
      <member refid="classnanodbc_1_1statement_1ae225c1ec30fb1095f96f207fab2a8793" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>reset_parameters</name></member>
      <member refid="classnanodbc_1_1statement_1ac9ea91624b4b6136f98b002f75376cd9" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>statement</name></member>
      <member refid="classnanodbc_1_1statement_1aaa2dbe21f428c67d7dd32b9d8eeb8877" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>statement</name></member>
      <member refid="classnanodbc_1_1statement_1a81bee831e734bedb4fbedd4cbf1a238f" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>statement</name></member>
      <member refid="classnanodbc_1_1statement_1a78cdb0dbf1437cd98eff448e8c6a8757" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>statement</name></member>
      <member refid="classnanodbc_1_1statement_1a99b7708d308ee9313f5879ed09750fdf" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>statement</name></member>
      <member refid="classnanodbc_1_1statement_1aaeb282293b92d0c9c0dc9e6452c91695" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>swap</name></member>
      <member refid="classnanodbc_1_1statement_1adbd1acbbdcc529dc668bfef341593573" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>timeout</name></member>
      <member refid="classnanodbc_1_1statement_1aa30610291426567164aab50aeacaa537" prot="public" virt="non-virtual"><scope>nanodbc::statement</scope><name>~statement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
